#!/usr/bin/python
# -*- coding: utf-8 -*-

# Import Statements
# MySQLdb   Python bindings for MySQL databases
# os        Miscellaneous operating system interfaces
# csv       CSV File Reading and Writing for comma seperated value files
# shutil    High-level file operations e.g Building Archives

import MySQLdb
import os
import unicodecsv as csv
import shutil
import time
import sys

# bs4       Beautiful Soup 4.x   General Parsing Library

from bs4 import UnicodeDammit

# sqlalchemy    Python SQL toolkit and Object Relational Mapper
from sqlalchemy import Table, Column, create_engine, MetaData, VARCHAR, Index, select, bindparam, Integer, func

# Automation of Edinburgh's SQL scripts to convert Coursera data dumps,
# bespoke surveys, and pii data into a database with 4 publishable extracts.


class Automation(object):
    # __init__  is triggered when an instance of the class is instanciated.
    #
    # course    is the he name of the course, e.g warhol, in the webapp this is
    #           generated by taking the course_name input field and cutting
    #           off the last three characters (the iteration).
    #
    # iteration is the three digits which specify which running of the course
    #           is being run eg. 002 for the second iteration of a course. In
    #           the webapp this is generated by taking the course_name input
    #           field and taking only the last three digits since input to that
    #           field is in the format <course>-<iteration> e.g warhol-002
    #
    # start     is the datatime that the course began on, in the UTC-7 timezone
    #           (Pacific Seaboard Time). In the webapp this is taken from the
    #           course.start input field and should be in the format of
    #           <Year>-<Month>-<Day> <Hour>:<Minute>:<Second> e.g
    #           2015-27-10 14:45:00
    def __init__(self, course, iteration, start):
        # Dictionary containing the database connection metadata
        # hostname      The IP or hostname of the server the database is running on. This will be
        #               127.0.0.1 if the server is being run locally.
        # username      The username of the user that has access privilages to the database.
        #
        # password      The password of the user that has access privilages to the database.

        self.user = {
            'hostname': "lamp-mooc.is.ed.ac.uk",
            'username': "",
            'password': "",
        }
        self.path = "/Users/craigpeden/Development/offline_process"

        # Dictionary containing the course metadata
        # course        Name of the course, taken from the course argument of the class
        #
        # iteration     Nth running of the course, taken from the iteration argument of the class
        #
        # database      The name of the database, this is made up of the database server prefix,
        #               the course and the iteration i.e vpodata_warhol002. Any hyphens are removed.
        #
        # course_start  The datatime of the start of the course in Pacific Seaboard Time. Taken
        #               from the start argument of the class

        self.info = {
            'course': course,
            'iteration': iteration,
            'database': "vpodata_" + course.replace("-", "") + iteration,
            'course_start': start
        }

        # Three variables containing the strings to be passed to the command line to prepare databases
        # for upcoming computations.

        drop = 'echo "DROP DATABASE IF EXISTS" '
        create = 'echo "CREATE DATABASE " '
        mysql_pipe = ' | mysql -h '

        # If the database we are going to use exists, DROP it to avoid any problems
        os.system(drop + self.info['database'] + mysql_pipe + self.user['hostname'])

        # Then create it again.
        os.system(create + self.info['database'] + mysql_pipe + self.user['hostname'])

        # Create the database connection using SQLAlchemy, bind the metadata to a variable
        self.engine = create_engine(
            'mysql://' +
            self.user['username'] + ':' +
            self.user['password'] + '@' +
            self.user['hostname'] + '/' +
            self.info['database'] +
            '?charset=utf8')
        self.metadata = MetaData(self.engine)

        # Variable containing the absolute path to the extracts folder.
        self.output = os.path.join(
            self.path,
            "files",
            self.info['course'] + self.info['iteration'],
            "extracts"
        )
        # Create the extracts folder
        if not os.path.exists(self.output):
            os.makedirs(self.output)

        # Variables tracking the progress/existance of survey computations.
        self.entrysurvey = self.exitsurvey = self.pii_check = False

    # Function which will connect to the database using MySQLdb.
    # Note: This is a seperate connection to the SQLAlchemy one established above.
    def connect(self):
        self.db = MySQLdb.connect(
            host=self.user['hostname'],
            user=self.user['username'],
            passwd=self.user['password'],
            db=self.info['database']
        )
        self.conn = self.engine.connect()
        self.t = self.conn.begin()

    # Function which will disconnect from the MySQLdb connection.
    # Note: This is a seperate connection to the SQLAlchemy one established above.
    def disconnect(self):
        self.conn.close()
        self.db.close()

    # Function which will send the general, forum, and hash_mapping data to the database
    # detailed above.
    def load(self):
        os.system(
            "mysql -h " +
            self.user['hostname'] + ' ' +
            self.info['database'] +
            ' < files/' +
            self.info['course'] +
            self.info['iteration'] + '/' +
            self.info['course'] +
            self.info['iteration'] +
            '_general.sql'
        )
        os.system(
            "mysql -h " +
            self.user['hostname'] + ' ' +
            self.info['database'] +
            ' < files/' +
            self.info['course'] +
            self.info['iteration'] + '/' +
            self.info['course'] +
            self.info['iteration'] +
            '_forum.sql')
        os.system(
            "mysql -h " +
            self.user['hostname'] + ' ' +
            self.info['database'] +
            ' < files/' +
            self.info['course'] +
            self.info['iteration'] + '/' +
            self.info['course'] +
            self.info['iteration'] +
            '_hash.sql')

    # Function which will change various tables to the UTF8mb4 character set in order
    # to be compatable with some foreign languages. It will also change some column
    # sizes to appropriate lengths.
    def clear_charset(self):
        sql = """
            ALTER TABLE `hash_mapping`
            CHARACTER SET = utf8mb4;

            ALTER TABLE `hash_mapping`
                CHANGE COLUMN eventing_user_id eventing_user_id VARCHAR(255)
                    CHARACTER SET utf8mb4 NOT NULL,
                CHANGE COLUMN `session_user_id` `session_user_id` VARCHAR(255)
                    CHARACTER SET utf8mb4 NOT NULL,
                CHANGE COLUMN `public_user_id` `public_user_id` VARCHAR(255)
                    CHARACTER SET utf8mb4 NOT NULL;

            ALTER TABLE `hash_mapping`
                CHANGE COLUMN `session_user_id` `session_user_id` VARCHAR(120) NOT NULL;

            ALTER TABLE `hash_mapping`
                ADD INDEX `session_user_id` (`session_user_id` ASC);

            ALTER TABLE `course_grades`
                CHARACTER SET = utf8mb4;

            ALTER TABLE `course_grades`
                CHANGE COLUMN `session_user_id` `session_user_id` VARCHAR(160)
                    CHARACTER SET utf8mb4 NOT NULL;

            ALTER TABLE `course_grades`
                ADD INDEX `session_user_id` (`session_user_id` ASC);

            ALTER TABLE `lecture_submission_metadata`
                ADD INDEX `session_user_id`(`session_user_id` ASC);

            ALTER TABLE `quiz_submission_metadata`
                ADD INDEX `session_user_id`(`session_user_id` ASC) ;

            ALTER TABLE `hg_assessment_submission_metadata`
                CHARACTER SET = utf8mb4 ;

            ALTER TABLE `hg_assessment_submission_metadata`
                CHANGE COLUMN `author_id` `author_id` VARCHAR(160)
                CHARACTER SET utf8mb4 NOT NULL ;"""

        try:
            self.conn.execute(sql)
            self.t.commit()
        except:
            self.t.rollback()

    # Function which will create the coursera_summary table, then populate it with data
    def standard_summary_extract(self):
        try:
            with self.db:
                sql = """SET @course_name = '{0}:User';
                CREATE TABLE coursera_summary (
                    id INT NOT NULL AUTO_INCREMENT,
                    session_user_id VARCHAR(120) NOT NULL,
                    user_id int(11),
                    threads int(10),
                    posts int(10),
                    comments int(10),
                    subs_forums int(10),
                    subs_threads int(10),
                    forums_visited int(10),
                    threads_read int(10),
                    reputation int(10),
                    lecture_distinct int(10),
                    lecture_watches int(10),
                    quiz_distinct int(10),
                    quiz_total_attempts int(10),
                    peer_final_grade int(10),
                    peer_assessments_completed int(10),
                    registration_time int(10),
                    last_access_time int(10),
                    timezone varchar(255),
                    ip_country varchar(45),
                    ip_continent varchar(45),
                    email_announcement tinyint(4),
                    email_forum tinyint(4),
                    normal_grade float,
                    distinction_grade float,
                    achievement_level varchar(255),
                    deleted tinyint(4),
                    PRIMARY KEY (id),
                    INDEX (user_id),
                    INDEX (session_user_id)
                ) ENGINE=InnoDB CHARACTER SET = utf8mb4
                select session_user_id,
                TIMESTAMPDIFF(day, '{1}', FROM_UNIXTIME(last_access_time, '%Y.%m.%d %H:%i:%s')) as last_access_time,
                TIMESTAMPDIFF(day, '{1}', FROM_UNIXTIME(registration_time, '%Y.%m.%d %H:%i:%s')) as registration_time,
                email_announcement, email_forum, timezone, deleted
                from users
                where access_group_id in ('4','5','6','9')
                and last_access_time != 0;

                SET SQL_SAFE_UPDATES=0;
                UPDATE coursera_summary as cs
                INNER JOIN hash_mapping as hm
                    ON cs.session_user_id = hm.session_user_id
                SET cs.user_id = hm.user_id;

                UPDATE coursera_summary as cs
                    INNER JOIN course_grades as cg
                        ON cs.session_user_id = cg.session_user_id
                    SET cs.normal_grade = cg.normal_grade,
                        cs.distinction_grade = cg.distinction_grade,
                        cs.achievement_level = cg.achievement_level;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(user_id) as user_id, count(id) as threads
                        FROM forum_threads
                        GROUP BY user_id
                    ) c ON  cs.user_id = c.user_id
                SET cs.threads = c.threads;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(user_id) as user_id, count(id) as posts
                        FROM forum_posts
                        GROUP BY user_id
                    ) c ON  cs.user_id = c.user_id
                SET cs.posts = c.posts;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(user_id) as user_id, count(id) as comments
                        FROM forum_comments
                        GROUP BY user_id
                    ) c ON  cs.user_id = c.user_id
                SET cs.comments = c.comments;

                UPDATE coursera_summary as cs
                    INNER JOIN forum_reputation_points fpr
                        ON cs.user_id = fpr.user_id
                    SET cs.reputation = fpr.points;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(user_id) as user_id, count(*) as subs_forums
                        FROM forum_subscribe_forums
                        GROUP BY user_id
                    ) c ON  cs.user_id = c.user_id
                SET cs.subs_forums = c.subs_forums;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(user_id) as user_id, count(*) as subs_threads
                        FROM forum_subscribe_threads
                        GROUP BY user_id
                    ) c ON  cs.user_id = c.user_id
                SET cs.subs_threads = c.subs_threads;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(substring(`key`,instr(`key`, '.') + 1)) as user_id,
                        count(SUBSTRING_INDEX(SUBSTR(`key`,instr(`key`, '_') + 1),'.',1)) as forums_visited
                        FROM `kvs_course.forum_readrecord`
                        GROUP BY substring(`key`,instr(`key`, '.') + 1)
                    ) c ON  cs.user_id = c.user_id
                SET cs.forums_visited = c.forums_visited;

                UPDATE coursera_summary as cs
                    INNER JOIN
                    (
                        SELECT DISTINCT(substring(`key`,instr(`key`, '.') + 1)) as user_id,
                        sum(SUBSTRING_INDEX(substr(`value`,(instr(`value`, 'a') + 2)),':',1)) as threads_read
                        FROM `kvs_course.forum_readrecord`
                        WHERE `value` not LIKE '%_all%'
                        GROUP BY substring(`key`,instr(`key`, '.') + 1)
                    ) c ON  cs.user_id = c.user_id
                SET cs.threads_read = c.threads_read;

                SET SQL_SAFE_UPDATES=0;
                UPDATE coursera_summary cs
                        INNER JOIN
                        (
                            select distinct(session_user_id), count(distinct(item_id)) as lecture_distinct, count(*) as lecture_watches
                            FROM lecture_submission_metadata
                            group by session_user_id
                        ) c ON  cs.session_user_id = c.session_user_id
                SET cs.lecture_distinct = c.lecture_distinct, cs.lecture_watches = c.lecture_watches;

                # how many quizzes did they take and how many times?
                SET SQL_SAFE_UPDATES=0;
                UPDATE  coursera_summary cs
                        INNER JOIN
                        (
                            select distinct(session_user_id), count(distinct(item_id)) as quiz_distinct, count(*) as quiz_total_attempts
                            FROM quiz_submission_metadata
                            group by session_user_id
                        ) c ON  cs.session_user_id = c.session_user_id
                SET     cs.quiz_distinct = c.quiz_distinct, cs.quiz_total_attempts = c.quiz_total_attempts;

                # how many peer assessments did they do?
                SET SQL_SAFE_UPDATES=0;
                UPDATE  coursera_summary cs
                        INNER JOIN
                        (
                        SELECT distinct(aem.author_id), count(*) as peer_assessments_completed
                        FROM hg_assessment_evaluation_metadata aem
                        group by aem.author_id
                        ) c ON  cs.session_user_id = c.author_id
                SET     cs.peer_assessments_completed = c.peer_assessments_completed;

                # what grade did they get in their final peer assessment?
                SET SQL_SAFE_UPDATES=0;
                UPDATE  coursera_summary cs
                        INNER JOIN
                        (
                            SELECT distinct(asm.author_id), aoem.final_grade as peer_final_grade
                            FROM hg_assessment_submission_metadata asm, hg_assessment_metadata am, hg_assessment_overall_evaluation_metadata aoem
                            where am.id = asm.assessment_id
                            and aoem.submission_id = asm.id
                            and am.deleted = 0
                            group by asm.author_id
                        ) c ON  cs.session_user_id = c.author_id
                SET     cs.peer_final_grade = c.peer_final_grade;""".format(self.info['course'], self.info['course_start'])

                cur = self.db.cursor()
                cur.execute(sql)
                cur.close()

        except:

            self.db = MySQLdb.connect(
                host=self.user['hostname'],
                user=self.user['username'],
                passwd=self.user['password'],
                db=self.info['database']
            )
            with self.db:
                cur = self.db.cursor()
                cur.execute(sql)
                cur.close()

        if self.pii_check:
            cur = self.db.cursor()
            sql = """UPDATE coursera_summary as cs
            INNER JOIN coursera_ip_country cip
                ON cs.user_id = cip.coursera_user_id
            SET cs.ip_country = cip.ip_country,
            cs.ip_continent = cip.ip_continent;"""
            cur.execute(sql)
            cur.close()

            header = """<html><head><style>@media print{.no-print,.no-print *{display:none!important}}</style><link rel=stylesheet id=rtp-google-font-css href="http://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700" type=text/css media="all"><link rel=stylesheet id=rtp-icon-fonts-animation-css href=http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/assets/fontello/css/animation.css type=text/css media="all"><link rel=stylesheet id=rtp-icon-fonts-css href=http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/assets/fontello/css/rtpanel-fontello.css type=text/css media="all"><link rel=stylesheet id=rtpanel-style-css href="http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/style.css?ver=4.1.5" type=text/css media="all"><link rel=stylesheet id=slb_core-css href="http://moocs.is.ed.ac.uk/wp-content/plugins/simple-lightbox/client/css/app.css?ver=2.3.1" type=text/css media="all"><script type=text/javascript src=https://www.google.com/jsapi></script><script type=text/javascript>function drawRegionsMap(){var A=google.visualization.arrayToDataTable(["""

            with self.db:
                cur = self.db.cursor()
                sql = """SELECT ip_country, count(ip_country) FROM coursera_summary
                        WHERE ip_country <> '' AND achievement_level <> 'none'
                        GROUP BY ip_country;"""

                cur.execute(sql)
                data = cur.fetchall()
                cur.close()

                # Check that there is data to do an extract with. This will fail if there is either no ip data, or no achievement level in the course_grades table
                if len(data) > 0:
                    # Save this data into a file named <course><iteration>_geomap_extract_achievement.csv
                    outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_geomap_extract_achievement.csv'), 'wb'))
                    outcsv.writerows(data)

                    output = []
                    [output.append(list(i)) for i in data]

                    with open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_geomap_extract.html'), 'w') as geomap_extract:
                        geomap_extract.write(header)
                        geomap_extract.write('["Country", "Users"],')

                        for i in output[:-1]:
                            outstr = '["' + i[0] + '",' + str(i[1]) + '],'
                            try:
                                geomap_extract.write(outstr.encode('utf8'))
                            except:
                                geomap_extract.write(unicode(outstr, errors='ignore'))

                        line_final = output[-1:][0]
                        geomap_extract.write('["' + line_final[0] + '",' + str(line_final[1]) + ']'.encode('utf8'))
                        geomap_extract.write("""]),I={legend:"none"},E=new google.visualization.GeoChart(document.getElementById("regions_div"));E.draw(A,I)}function drawRegionsMapPass(){var A=google.visualization.arrayToDataTable([""")

                        # Generate the GeoMaps extract, a list of each country with the number of users who come from that country.
                        s = select([self.coursera_ip_country.c.ip_country, func.count(self.coursera_ip_country.c.ip_country)]).\
                            group_by(self.coursera_ip_country.c.ip_country)
                        data = self.conn.execute(s).fetchall()[1:]  # Drop the empty country.
                        output = []
                        [output.append(list(i)) for i in data]

                        geomap_extract.write('["Country", "Users"],')
                        for i in output[:-1]:
                            outstr = '["' + i[0] + '",' + str(i[1]) + '],'
                            geomap_extract.write(outstr.encode('utf8'))

                        line_final = output[-1:][0]
                        geomap_extract.write('["' + line_final[0] + '",' + str(line_final[1]) + ']'.encode('utf8'))
                        geomap_extract.write("""]),I={legend:"none"},E=new google.visualization.GeoChart(document.getElementById("regions_div_pass"));E.draw(A,I)}google.load("visualization","1",{packages:["geochart"]}),google.setOnLoadCallback(drawRegionsMap),google.setOnLoadCallback(drawRegionsMapPass);</script><body><div id=header-wrapper class="rtp-header-wrapper rtp-section-wrapper no-print"><header id=header class="row rtp-section-container" role=banner><div class="rtp-header large-12 columns rtp-full-width-grid"><nav id=rtp-primary-menu role=navigation class="rtp-nav-wrapper rtp-mobile-nav"><a class=rtp-menu-icon id=rtp-mobile-menu-button href=#rtp-primary-menu><i class=rtp-icon-menu></i></a><ul id=rtp-nav-menu class="menu rtp-nav-container clearfix"><li id=menu-item-46 class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor current-menu-ancestor current-menu-parent current-page-parent current_page_parent current_page_ancestor menu-item-has-children menu-item-46"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/">MOOC Data</a><ul class=sub-menu><li id=menu-item-190 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-190"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a><ul class=sub-menu><li id=menu-item-275 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-275"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a></li><li id=menu-item-231 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-231"><a href="http://moocs.is.ed.ac.uk/course-design-and-structures/">Course design and structures</a></li><li id=menu-item-229 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-229"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/learner-participation-overview/">Learner participation overview</a></li><li id=menu-item-506 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-506"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/survey-participation/">Survey participation</a></li></ul></li><li id=menu-item-167 class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-146 current_page_item menu-item-has-children menu-item-167"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/">Coursera Iteration 1</a><ul class=sub-menu><li id=menu-item-107 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-107"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/maps-of-mooc-participants/">Coursera Iteration 1 – Geographic maps of MOOC participation</a></li><li id=menu-item-115 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-115"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-geographic-location-charts-and-popularity/">Coursera Iteration 1 – Geographic location charts and popularity</a></li><li id=menu-item-106 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-106"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/mooc-participant-tool-usage/">Coursera Iteration 1 – Tool usage maps</a></li><li id=menu-item-96 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-96"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/tool-usage-charts/">Coursera Iteration 1 – Tool usage charts</a></li><li id=menu-item-467 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-467"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum/">Coursera 1 – Forum Activity (SNA)</a></li><li id=menu-item-478 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-478"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum-activity-over-time/">Coursera 1 – Forum activity over time</a></li><li id=menu-item-123 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-123"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-survivor-analysis/">Coursera Iteration 1 – Survivor analysis</a></li></ul></li><li id=menu-item-166 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-166"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-2/">Coursera Iteration 2</a><ul class=sub-menu><li id=menu-item-307 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-307"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-maps-of-mooc-participation/">Coursera Iteration 2 – Geographic maps of MOOC participation</a></li><li id=menu-item-306 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-306"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-location-charts-and-popularity/">Coursera Iteration 2 – Geographic location charts and popularity</a></li><li id=menu-item-297 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-297"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-tool-usage-maps/">Coursera Iteration 2 – Tool usage maps</a></li><li id=menu-item-305 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-305"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-tool-usage-charts/">Coursera Iteration 2 – Tool usage charts</a></li><li id=menu-item-157 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-157"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-e-learning-and-digital-cultures-twitter-activity/">Coursera Iteration 2 – E-Learning and Digital Cultures Twitter activity</a></li></ul></li><li id=menu-item-200 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-200"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/">Coursera comparison</a><ul class=sub-menu><li id=menu-item-202 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-202"><a href="http://moocs.is.ed.ac.uk/survey-data/">Survey data</a></li><li id=menu-item-343 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-343"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/learner-location/">Learner location</a></li><li id=menu-item-364 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-364"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/tool-usage/">Tool usage</a></li><li id=menu-item-406 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-406"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/returning-learners/">Returning learners</a></li></ul></li><li id=menu-item-541 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-541"><a href="http://moocs.is.ed.ac.uk/wave-2-courses-iteration-1/">New courses iteration 1</a></li></ul></li><li id=menu-item-242 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-242"><a href="http://moocs.is.ed.ac.uk/contact-us/">Contact us</a></li><li id=menu-item-397 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-397"><a href="http://moocs.is.ed.ac.uk/acknowledgements/">Acknowledgements</a></li></ul></nav><div class="rtp-logo-container clearfix"><h2 class=rtp-site-logo><a role=link href="http://moocs.is.ed.ac.uk/" title=moocs.is.ed.ac.uk><img role=img alt=moocs.is.ed.ac.uk height=94 width=473 src=http://moocs.is.ed.ac.uk/wp-content/uploads/2014/03/Capture.png></a></h2><h3 class=tagline>MOOCs at the University of Edinburgh</h3></div><hr></div></header></div><h2 style=text-align:center;padding:25px>""" + self.info['course'].encode('utf8') + self.info['iteration'].encode('utf8') + """ - Statement of Acomplishment Only</h2><div id=regions_div style=width:1180px;height:500px;margin-left:auto;margin-right:auto></div><h2 style=text-align:center;padding:25px>""" + self.info['course'].encode('utf8') + self.info['iteration'].encode('utf8') + """ - All Students</h2><div id=regions_div_pass style=width:1180px;height:500px;margin-left:auto;margin-right:auto></div></body></html>""".encode('utf8'))

                    # Save this data into a file named <course><iteration>_geomap_extract.csv
                    outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_geomap_extract_everyone.csv'), 'wb'))
                    outcsv.writerows(data)
                else:
                    with open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_error.txt'), 'w') as error_file:
                        error_file.write("There is an error with the IP process. Check the course_grade table to make sure achievement levels are present. Then check the coursera_pii table to make sure the IP data is correctly loaded.")

                    with open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_geomap_extract.html'), 'w') as geomap_extract:
                        geomap_extract.write(header)

                        # Generate the GeoMaps extract, a list of each country with the number of users who come from that country.
                        s = select([self.coursera_ip_country.c.ip_country, func.count(self.coursera_ip_country.c.ip_country)]).\
                            group_by(self.coursera_ip_country.c.ip_country)
                        data = self.conn.execute(s).fetchall()[1:]  # Drop the empty country.
                        output = []
                        [output.append(list(i)) for i in data]

                        geomap_extract.write('["Country", "Users"],')
                        for i in output[:-1]:
                            outstr = '["' + i[0] + '",' + str(i[1]) + '],'
                            geomap_extract.write(outstr.encode('utf8'))

                        line_final = output[-1:][0]
                        geomap_extract.write('["' + line_final[0] + '",' + str(line_final[1]) + ']'.encode('utf8'))
                        geomap_extract.write("""]),I={legend:"none"},E=new google.visualization.GeoChart(document.getElementById("regions_div_pass"));E.draw(A,I)}google.load("visualization","1",{packages:["geochart"]}),google.setOnLoadCallback(drawRegionsMap),google.setOnLoadCallback(drawRegionsMapPass);</script><body><div id=header-wrapper class="rtp-header-wrapper rtp-section-wrapper no-print"><header id=header class="row rtp-section-container" role=banner><div class="rtp-header large-12 columns rtp-full-width-grid"><nav id=rtp-primary-menu role=navigation class="rtp-nav-wrapper rtp-mobile-nav"><a class=rtp-menu-icon id=rtp-mobile-menu-button href=#rtp-primary-menu><i class=rtp-icon-menu></i></a><ul id=rtp-nav-menu class="menu rtp-nav-container clearfix"><li id=menu-item-46 class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor current-menu-ancestor current-menu-parent current-page-parent current_page_parent current_page_ancestor menu-item-has-children menu-item-46"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/">MOOC Data</a><ul class=sub-menu><li id=menu-item-190 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-190"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a><ul class=sub-menu><li id=menu-item-275 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-275"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a></li><li id=menu-item-231 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-231"><a href="http://moocs.is.ed.ac.uk/course-design-and-structures/">Course design and structures</a></li><li id=menu-item-229 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-229"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/learner-participation-overview/">Learner participation overview</a></li><li id=menu-item-506 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-506"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/survey-participation/">Survey participation</a></li></ul></li><li id=menu-item-167 class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-146 current_page_item menu-item-has-children menu-item-167"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/">Coursera Iteration 1</a><ul class=sub-menu><li id=menu-item-107 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-107"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/maps-of-mooc-participants/">Coursera Iteration 1 – Geographic maps of MOOC participation</a></li><li id=menu-item-115 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-115"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-geographic-location-charts-and-popularity/">Coursera Iteration 1 – Geographic location charts and popularity</a></li><li id=menu-item-106 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-106"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/mooc-participant-tool-usage/">Coursera Iteration 1 – Tool usage maps</a></li><li id=menu-item-96 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-96"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/tool-usage-charts/">Coursera Iteration 1 – Tool usage charts</a></li><li id=menu-item-467 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-467"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum/">Coursera 1 – Forum Activity (SNA)</a></li><li id=menu-item-478 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-478"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum-activity-over-time/">Coursera 1 – Forum activity over time</a></li><li id=menu-item-123 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-123"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-survivor-analysis/">Coursera Iteration 1 – Survivor analysis</a></li></ul></li><li id=menu-item-166 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-166"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-2/">Coursera Iteration 2</a><ul class=sub-menu><li id=menu-item-307 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-307"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-maps-of-mooc-participation/">Coursera Iteration 2 – Geographic maps of MOOC participation</a></li><li id=menu-item-306 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-306"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-location-charts-and-popularity/">Coursera Iteration 2 – Geographic location charts and popularity</a></li><li id=menu-item-297 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-297"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-tool-usage-maps/">Coursera Iteration 2 – Tool usage maps</a></li><li id=menu-item-305 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-305"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-tool-usage-charts/">Coursera Iteration 2 – Tool usage charts</a></li><li id=menu-item-157 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-157"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-e-learning-and-digital-cultures-twitter-activity/">Coursera Iteration 2 – E-Learning and Digital Cultures Twitter activity</a></li></ul></li><li id=menu-item-200 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-200"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/">Coursera comparison</a><ul class=sub-menu><li id=menu-item-202 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-202"><a href="http://moocs.is.ed.ac.uk/survey-data/">Survey data</a></li><li id=menu-item-343 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-343"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/learner-location/">Learner location</a></li><li id=menu-item-364 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-364"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/tool-usage/">Tool usage</a></li><li id=menu-item-406 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-406"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/returning-learners/">Returning learners</a></li></ul></li><li id=menu-item-541 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-541"><a href="http://moocs.is.ed.ac.uk/wave-2-courses-iteration-1/">New courses iteration 1</a></li></ul></li><li id=menu-item-242 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-242"><a href="http://moocs.is.ed.ac.uk/contact-us/">Contact us</a></li><li id=menu-item-397 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-397"><a href="http://moocs.is.ed.ac.uk/acknowledgements/">Acknowledgements</a></li></ul></nav><div class="rtp-logo-container clearfix"><h2 class=rtp-site-logo><a role=link href="http://moocs.is.ed.ac.uk/" title=moocs.is.ed.ac.uk><img role=img alt=moocs.is.ed.ac.uk height=94 width=473 src=http://moocs.is.ed.ac.uk/wp-content/uploads/2014/03/Capture.png></a></h2><h3 class=tagline>MOOCs at the University of Edinburgh</h3></div><hr></div></header></div><h2 style=text-align:center;padding:25px>""" + self.info['course'].encode('utf8') + self.info['iteration'].encode('utf8') + """ - All Students</h2><div id=regions_div_pass style=width:1180px;height:500px;margin-left:auto;margin-right:auto></div></body></html>""".encode('utf8'))

                    # Save this data into a file named <course><iteration>_geomap_extract.csv
                    outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_geomap_extract_everyone.csv'), 'wb'))
                    outcsv.writerows(data)

    # Function which will create the coursera_pii table then populate it with the contents of the pii file
    # if the user has uploaded it. It will then strip proxys from the data, convert each IP to a location, and populate the
    # coursera_ip_country table with this information.
    def pii(self):
        # Create the coursera_pii table
        coursera_pii = Table('coursera_pii', self.metadata,
                             Column('coursera_user_id', VARCHAR(120), primary_key=True),
                             Column('last_access_ip', VARCHAR(255)),
                             Index('idx_coursera_user_id', 'coursera_user_id'))
        coursera_pii.create()

        inserts = []
        count = 0
        lines = 0

        print "Loading pii Data"
        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_pii.csv', 'rb') as csvfile:
            try:
                f = csv.DictReader(csvfile)

                for line in f:
                    inserts.append({'coursera_user_id': line.get('coursera_user_id'), 'last_access_ip': line.get('last_access_ip')})
                    count = count + 1
                    if count % 1000 is 0:
                        try:
                            self.conn.execute(coursera_pii.insert(), inserts)
                            self.t.commit()
                        except:
                            self.t.rollback()
                        inserts = []
                    lines += 1
            except:
                print "Loading pii data failed, using line-by-line fallback"

                for line in csvfile:
                    data = line.split(',')
                    inserts.append({'coursera_user_id': data[0], 'last_access_ip': data[4]})
                    count = count + 1
                    if count % 1000 is 0:
                        try:
                            self.conn.execute(coursera_pii.insert(), inserts)
                            self.t.commit()
                        except:
                            self.t.rollback()
                        inserts = []
                    lines += 1

            try:
                self.conn.execute(coursera_pii.insert(), inserts)
                self.t.commit()
            except:
                self.t.rollback()

        with self.db:
            cur = self.db.cursor()
            sql = """DELETE FROM coursera_pii
                WHERE last_access_ip = '';"""

            cur.execute(sql)
            cur.close()

        # Strip proxy IPs from the data so each user has a single IP at most
        with self.db:
            cur = self.db.cursor()
            sql = """UPDATE coursera_pii
                SET last_access_ip = SUBSTRING_INDEX(last_access_ip,',',1)
            where INSTR (last_access_ip, ',') > 0;"""

            cur.execute(sql)
            cur.close()

        # Create the coursera_ip_country table
        self.coursera_ip_country = Table('coursera_ip_country', self.metadata,
                                         Column('coursera_user_id', VARCHAR(120), primary_key=True),
                                         Column('last_access_ip', VARCHAR(255)),
                                         Column('ip_country', VARCHAR(255)),
                                         Column('ip_continent', VARCHAR(45)),
                                         Index('idx_coursera_user_id', 'coursera_user_id'),
                                         mysql_engine='InnoDB',
                                         mysql_charset='utf8mb4')
        self.coursera_ip_country.create()

        # 1. Get a list of every IP that has connected to the course
        # 2. Efficiently find the location of each IP
        # 3. Put this data into the coursera_ip_country table
        s = select([coursera_pii])
        result = self.conn.execute(s)

        with self.db:
            cur = self.db.cursor()
            for row in result:
                sql = """INSERT INTO coursera_ip_country
                    SELECT coursera_user_id,
                    last_access_ip,
                    country_name as ip_country,
                    continent_name as ip_continent
                    FROM coursera_pii, ip_table.ip
                    WHERE ip_to >= INET_ATON(last_access_ip) AND coursera_user_id = {0}
                    LIMIT 1;""".format(str(row[0]))
                try:
                    cur.execute(sql)
                except:
                    print sql
            cur.close()

        # Change any countries that differ from the Google Maps notation.
        u = self.coursera_ip_country.update().where(self.coursera_ip_country.c.ip_country == bindparam('old')).values(ip_country=bindparam('new'))
        self.conn.execute(u, [
            {
                'old': 'IRAN, ISLAMIC REPUBLIC OF',
                'new': 'ISLAMIC REPUBLIC OF IRAN'
            },
            {
                'old': 'MOLDOVA, REPUBLIC OF',
                'new': 'REPUBLIC OF MOLDOVA'
            },
            {
                'old': 'TAIWAN, PROVINCE OF CHINA',
                'new': 'PROVINCE OF CHINA TAIWAN'
            },
            {
                'old': 'KOREA, REPUBLIC OF',
                'new': 'REPUBLIC OF KOREA'
            },
            {
                'old': 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF',
                'new': 'THE FORMER YUGOSLAV REPUBLIC OF MACEDONIA'
            },
            {
                'old': 'TANZANIA, UNITED REPUBLIC OF',
                'new': 'UNITED REPUBLIC OF TANZANIA'
            },
            {
                'old': 'PALESTINIAN TERRITORY, OCCUPIED',
                'new': 'OCCUPIED PALESTINIAN TERRITORY'
            },
            {
                'old': 'VIRGIN ISLANDS, BRITISH',
                'new': 'BRITISH VIRGIN ISLANDS'
            },
            {
                'old': 'VIRGIN ISLANDS, U.S.',
                'new': 'U.S. VIRGIN ISLANDS,'
            },
            {
                'old': 'MICRONESIA, FEDERATED STATES OF',
                'new': 'FEDERATED STATES OF MICRONESIA'
            }])

        self.pii_check = True

    def clean_survey(self, survey):
        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_' + survey + '.csv', 'rU') as csvfile:
            enc = UnicodeDammit(csvfile.read()).original_encoding

        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_' + survey + '.csv', 'rU') as csvfile:
            lines = [x for x in csv.reader([UnicodeDammit.detwingle(y.replace('\0', '')) for y in csvfile], encoding=enc)]

            agecolumns = []
            work = []

            for number in range(0, len(lines[1])):
                if "subject area related" in lines[1][number]:
                    if lines[2][number] == "Yes":
                        area_related = number
                if "Is English your first language" in lines[1][number]:
                    if lines[2][number] == "Yes":
                        english_columns = number
                if "What is your age" in lines[1][number]:
                    agecolumns.append([lines[2][number], number])
                if "What is your current area of employment" in lines[1][number]:
                    work.append([lines[2][number], number])
                if "offering" in lines[2][number]:
                    offering = number

            english = {}
            same_subject = {}
            age = {}
            job = {}
            offer = {}

            for line in lines:
                for ages in agecolumns:
                    if line[ages[1]] == "1":
                        age[line[0]] = ages[0].encode('utf8')

                for jobs in work:
                    if line[jobs[1]] == "1":
                        job[line[0]] = jobs[0].encode('utf8')

                try:
                    if line[area_related] == "1":
                        same_subject[line[0]] = "Yes"
                    else:
                        same_subject[line[0]] = "No"

                except:
                    same_subject[line[0]] = "Unknown"

                try:
                    if line[english_columns] == "1":
                        english[line[0]] = "Yes"
                    else:
                        english[line[0]] = "No"

                except:
                    english[line[0]] = "Unknown"

                try:
                    if line[offering] == "1":
                        offer[line[0]] = "1"
                    else:
                        offer[line[0]] = "0"
                except:
                    offer[line[0]] = "Unknown"

        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_' + survey + '.csv', 'rU') as csvfile:
            f = csv.DictReader([UnicodeDammit.detwingle(y.replace('\0', '')) for y in csvfile.readlines()[2:]], encoding=enc)
            with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_' + survey + '_clean.csv', 'w') as csvoutfile:
                fieldnames = ['session_user_id', 'coursera_user_id', 'submission_time', 'english', 'cert', 'learn_new', 'improve', 'new_people', 'try_online', 'try_MOOC', 'browse_ed', 'unsure', 'gender', 'age', 'academic_level', 'same_subject']
                writer = csv.DictWriter(csvoutfile, fieldnames=fieldnames)
                writer.writeheader()

                for line in f:
                    output = {}
                    output['session_user_id'] = line.get('session_user_id').encode('utf8')
                    output['coursera_user_id'] = line.get('coursera_user_id').encode('utf8')
                    output['submission_time'] = line.get('submission_time').encode('utf8')

                    output['english'] = english[output['session_user_id']]

                    if line.get(u'To get a certificate').encode('utf8') is "1":
                        output['cert'] = 1
                    else:
                        output['cert'] = 0

                    if line.get(u'Learn new things').encode('utf8') is "1":
                        output['learn_new'] = 1
                    else:
                        output['learn_new'] = 0

                    if line.get(u'Improve my career options').encode('utf8') is "1":
                        output['improve'] = 1
                    else:
                        output['improve'] = 0

                    if line.get(u'Meet new people').encode('utf8') is "1":
                        output['new_people'] = 1
                    else:
                        output['new_people'] = 0

                    if line.get(u'Try online education').encode('utf8') is "1":
                        output['try_online'] = 1
                    else:
                        output['try_online'] = 0

                    if line.get(u'See what MOOCs are').encode('utf8') is "1":
                        output['try_MOOC'] = 1
                    else:
                        output['try_MOOC'] = 0

                    if line.get(u'Unsure').encode('utf8') is "1":
                        output['unsure'] = 1
                    else:
                        output['unsure'] = 0

                    if line.get(u'Male').encode('utf8') is "1":
                        output['gender'] = "Male"
                    elif line.get(u'Female').encode('utf8') is "1":
                        output['gender'] = "Female"
                    else:
                        output['gender'] = "Prefer not to say"

                    try:
                        output['browse_ed'] = offer[output['session_user_id']]
                    except:
                        output['browse_ed'] = "N/A"
                    try:
                        output['same_subject'] = same_subject[output['session_user_id']]
                    except:
                        output['same_subject'] = "N/A"
                    try:
                        output['age'] = age[output['session_user_id']]
                    except:
                        output['age'] = "N/A"
                    try:
                        output['academic_level'] = job[output['session_user_id']]
                    except:
                        output['academic_level'] = "N/A"

                    writer.writerow(output)

    # Function which will load the data from the entry survey file and populate the coursera_entry_survey table.
    def load_entry_survey(self):
        self.coursera_entry_survey = Table('coursera_entry_survey', self.metadata,
                                           Column('session_user_id', VARCHAR(40), nullable=True),
                                           Column('coursera_user_id', Integer, nullable=True),
                                           Column('submission_time', VARCHAR(28), nullable=True),
                                           Column('english', VARCHAR(3), nullable=True),
                                           Column('cert', Integer, nullable=True),
                                           Column('learn_new', Integer, nullable=True),
                                           Column('improve', Integer, nullable=True),
                                           Column('new_people', Integer, nullable=True),
                                           Column('try_online', Integer, nullable=True),
                                           Column('try_MOOC', Integer, nullable=True),
                                           Column('browse_ed', Integer, nullable=True),
                                           Column('unsure', Integer, nullable=True),
                                           Column('gender', VARCHAR(17), nullable=True),
                                           Column('age', VARCHAR(17), nullable=True),
                                           Column('academic_level', VARCHAR(59), nullable=True),
                                           Column('same_subject', VARCHAR(4), nullable=True),
                                           mysql_engine='InnoDB',
                                           mysql_charset='utf8mb4'
                                           )

        self.coursera_entry_survey.create()

        self.clean_survey("entry")

        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_entry_clean.csv', 'rb') as csvfile:
            f = csv.DictReader(csvfile)
            for line in f:
                self.conn.execute("INSERT INTO coursera_entry_survey (session_user_id,coursera_user_id,submission_time,english,cert,learn_new,improve,new_people,try_online,try_MOOC,browse_ed,unsure,gender, age, academic_level, same_subject) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)", (line.get('session_user_id'), line.get('coursera_user_id'), line.get('submission_time'), line.get('english'), line.get('cert'), line.get('learn_new'), line.get('improve'), line.get('new_people'), line.get('try_online'), line.get('try_MOOC'), line.get('browse_ed'), line.get('unsure'), line.get('gender'), line.get('age'), line.get('academic_level'), line.get('same_subject')))

        self.entrysurvey = True

    # Function which will load the data from the exit survey file and populate the coursera_exit_survey table.
    def load_exit_survey(self):
        self.coursera_exit_survey = Table('coursera_exit_survey', self.metadata,
                                          Column('session_user_id', VARCHAR(40), nullable=True),
                                          Column('coursera_user_id', Integer, nullable=True),
                                          Column('submission_time', VARCHAR(28), nullable=True),
                                          Column('english', VARCHAR(3), nullable=True),
                                          Column('browse_ed', Integer, nullable=True),
                                          Column('learn_new', Integer, nullable=True),
                                          Column('try_online', Integer, nullable=True),
                                          Column('new_people', Integer, nullable=True),
                                          Column('improve', Integer, nullable=True),
                                          Column('cert', Integer, nullable=True),
                                          Column('try_MOOC', Integer, nullable=True),
                                          Column('unsure', Integer, nullable=True),
                                          Column('gender', VARCHAR(17), nullable=True),
                                          Column('age', VARCHAR(17), nullable=True),
                                          Column('academic_level', VARCHAR(59), nullable=True),
                                          Column('same_subject', VARCHAR(4), nullable=True),
                                          mysql_engine='InnoDB',
                                          mysql_charset='utf8mb4'
                                          )

        self.coursera_exit_survey.create()

        self.clean_survey("exit")

        with open(self.path + '/files/' + self.info['course'] + self.info['iteration'] + '/' + self.info['course'] + self.info['iteration'] + '_exit_clean.csv', 'rb') as csvfile:
            f = csv.DictReader(csvfile)
            for line in f:
                self.conn.execute("INSERT INTO coursera_exit_survey (session_user_id,coursera_user_id,submission_time,english,browse_ed,learn_new,try_online,new_people,improve,cert,try_MOOC,unsure,gender, age, academic_level, same_subject) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)", (line.get('session_user_id'), line.get('coursera_user_id'), line.get('submission_time'), line.get('english'), line.get('cert'), line.get('learn_new'), line.get('improve'), line.get('new_people'), line.get('try_online'), line.get('try_MOOC'), line.get('browse_ed'), line.get('unsure'), line.get('gender'), line.get('age'), line.get('academic_level'), line.get('same_subject')))

        self.exitsurvey = True

    # Function which will merge the data from the entry and exit surveys without duplicates and creates a single unified table.
    def merge_survey(self):

        coursera_survey_merged = Table('coursera_survey_merged', self.metadata,
                                       Column('session_user_id', VARCHAR(40), nullable=False),
                                       Column('user_id', Integer),
                                       Column('submission_time', VARCHAR(28)),
                                       Column('english', VARCHAR(5)),
                                       Column('cert', Integer),
                                       Column('learn_new', Integer),
                                       Column('improve', Integer),
                                       Column('new_people', Integer),
                                       Column('try_online', Integer),
                                       Column('try_MOOC', Integer),
                                       Column('browse_ed', Integer),
                                       Column('unsure', Integer),
                                       Column('gender', VARCHAR(40)),
                                       Column('age', VARCHAR(40)),
                                       Column('academic_level', VARCHAR(60)),
                                       Column('same_subject', VARCHAR(4)),
                                       Index('idx_session_user_id', 'session_user_id'),
                                       Index('idx_user_id', 'user_id'),
                                       mysql_engine='InnoDB',
                                       mysql_charset='utf8mb4'
                                       )

        coursera_survey_merged.create()

        # If there is an entry survey and no exit, use only entry
        if self.entrysurvey and not self.exitsurvey:
            ins = coursera_survey_merged.insert().from_select(['session_user_id', 'user_id', 'submission_time', 'english', 'cert', 'learn_new', 'improve', 'new_people', 'try_online', 'try_MOOC', 'browse_ed', 'unsure', 'gender', 'age', 'academic_level', 'same_subject'], select([self.coursera_entry_survey]))
            self.conn.execute(ins)

        # If there is an exit survey and no entry, use only exit
        elif self.exitsurvey and not self.entrysurvey:
            ins = coursera_survey_merged.insert().from_select(['session_user_id', 'user_id', 'submission_time', 'english', 'cert', 'learn_new', 'improve', 'new_people', 'try_online', 'try_MOOC', 'browse_ed', 'unsure', 'gender', 'age', 'academic_level', 'same_subject'], select([self.coursera_exit_survey]))
            self.conn.execute(ins)

        # If there is both an entry and an exit survey, use both without duplication
        else:
            sql = """INSERT INTO coursera_survey_merged
            (session_user_id, user_id, submission_time, english, cert, learn_new, improve, new_people, try_online, try_MOOC, browse_ed, unsure, gender, age, academic_level, same_subject)
            SELECT session_user_id, coursera_user_id, submission_time, english, cert, learn_new, improve, new_people, try_online, try_MOOC, browse_ed, unsure, gender, age, academic_level, same_subject
            FROM coursera_entry_survey;"""

            try:
                self.conn.execute(sql)
                self.t.commit()
            except:
                self.t.rollback()

            sql = """INSERT INTO coursera_survey_merged
            (session_user_id, user_id, submission_time, english, cert, learn_new, improve, new_people, try_online, try_MOOC, browse_ed, unsure, gender, age, academic_level, same_subject)
            SELECT session_user_id, coursera_user_id, submission_time, english, cert, learn_new, improve, new_people, try_online, try_MOOC, browse_ed, unsure, gender, age, academic_level, same_subject
            FROM coursera_exit_survey
            where session_user_id not in (
                select session_user_id
                from coursera_entry_survey);"""

            try:
                self.conn.execute(sql)
                self.t.commit()
            except:
                self.t.rollback()

    # Function which will create the coursera_tool_usage_summary table and populate it with how many people use each combination of tools
    # avaliable to students.
    def tools_summary(self):
        coursera_tool_usage_summary = Table('coursera_tool_usage_summary', self.metadata,
                                            Column('activity', VARCHAR(255)),
                                            Column('user_group', VARCHAR(255)),
                                            Column('user_count', VARCHAR(255)),
                                            mysql_engine='InnoDB',
                                            mysql_charset='utf8mb4'
                                            )
        coursera_tool_usage_summary.create()

        sql = """INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
        SELECT 'Posting to Forums' as activity, 'All Students' as user_group, COUNT(user_id) as user_count
        FROM coursera_summary
        WHERE (threads is not null or posts is not null or comments is not null);

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Reading Forums' as activity, 'All Students' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE (threads_read is not null or forums_visited is not null);

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Watching Lectures' as activity, 'All Students' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE lecture_distinct is not null;

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Taking Quizzes' as activity, 'All Students' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE quiz_distinct is not null;

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Peer Assessments' as activity, 'All Students' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE peer_final_grade is not null;

        -- Not completed
        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Posting to Forums' as activity, 'Not completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND achievement_level like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Reading Forums' as activity, 'Not completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE (threads_read is not null or forums_visited is not null)
            AND achievement_level like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Watching Lectures' as activity, 'Not completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE lecture_distinct is not null
            AND achievement_level like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Taking Quizzes' as activity, 'Not completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE quiz_distinct is not null
            AND achievement_level like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Peer Assessments' as activity, 'Not completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE peer_final_grade is not null
            AND achievement_level like 'none';

        -- Completed (SOA)
        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Posting to Forums' as activity, 'Completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND achievement_level not like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Reading Forums' as activity, 'Completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE (threads_read is not null or forums_visited is not null)
            AND achievement_level not like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Watching Lectures' as activity, 'Completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE lecture_distinct is not null
            AND achievement_level not like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Taking Quizzes' as activity, 'Completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE quiz_distinct is not null
            AND achievement_level not like 'none';

        INSERT INTO coursera_tool_usage_summary (activity, user_group, user_count)
            SELECT 'Peer Assessments' as activity, 'Completed' as user_group, COUNT(user_id) as user_count
            FROM coursera_summary
            WHERE peer_final_grade is not null
            AND achievement_level not like 'none';"""

        try:
            self.conn.execute(sql)
            self.t.commit()

        except:
            self.t.rollback()

    # Function which will create the coursera_tool_usage table and populate it with data on if each
    # individual user made use of each tool avaliable to them on the course.
    def tools_usage(self):
        coursera_tool_usage = Table('coursera_tool_usage', self.metadata,
                                    Column('session_user_id', VARCHAR(120), nullable=False),
                                    Column('posting', Integer()),
                                    Column('reading', Integer()),
                                    Column('lectures', Integer()),
                                    Column('quizzes', Integer()),
                                    Column('peer', Integer()),
                                    Index('idx_session_user_id', 'session_user_id'),
                                    mysql_engine='InnoDB',
                                    mysql_charset='utf8mb4'
                                    )
        coursera_tool_usage.create()

        sql = """INSERT INTO coursera_tool_usage
        SELECT session_user_id, null, null, null, null, null
        FROM users
        WHERE access_group_id in ('4','5','6','9')
        AND last_access_time != 0;

        UPDATE coursera_tool_usage ctu
            INNER JOIN coursera_summary cs
                ON ctu.session_user_id = cs.session_user_id
            SET ctu.posting = '1'
            WHERE (cs.threads is not null or cs.posts is not null or cs.comments is not null);

        UPDATE coursera_tool_usage ctu
            INNER JOIN coursera_summary cs
                ON ctu.session_user_id = cs.session_user_id
            SET ctu.reading = '1'
            WHERE (threads_read is not null or forums_visited is not null);

        UPDATE coursera_tool_usage ctu
            INNER JOIN coursera_summary cs
                ON ctu.session_user_id = cs.session_user_id
            SET ctu.lectures = '1'
            WHERE lecture_distinct is not null;

        UPDATE coursera_tool_usage ctu
            INNER JOIN coursera_summary cs
                ON ctu.session_user_id = cs.session_user_id
            SET ctu.quizzes = '1'
            WHERE quiz_distinct is not null;

        UPDATE coursera_tool_usage ctu
            INNER JOIN coursera_summary cs
                ON ctu.session_user_id = cs.session_user_id
            SET ctu.peer = '1'
            WHERE peer_final_grade is not null;"""

        try:
            self.conn.execute(sql)
            self.t.commit()

        except:
            self.t.rollback()

    # Function which will take the information on which combinations of tools each user uses and will format it
    # in a format for importing to Google Chart's HashMap format.
    def tools_google(self):
        coursera_tool_summary_google = Table('coursera_tool_summary_google', self.metadata,
                                             Column('location', VARCHAR(255)),
                                             Column('parent', VARCHAR(255)),
                                             Column('tool_usage', VARCHAR(255)),
                                             Column('tool_colour', VARCHAR(255)),
                                             mysql_engine='InnoDB',
                                             mysql_charset='utf8mb4'
                                             )
        coursera_tool_summary_google.create()

        sql = """INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
        SELECT '""" + self.info['course'] + self.info['iteration'] + """'  as location, null as parent, 10 as tool_usage, 10 as tool_colour;

        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('All students (',count(distinct(user_id)), ')') using utf8) as location, '""" + self.info['course'] + self.info['iteration'] + """' as parent, 10 as tool_usage, 10 as tool_colour
            FROM coursera_summary;

        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('Completed students only (',count(distinct(user_id)), ')') using utf8) as location, '""" + self.info['course'] + self.info['iteration'] + """' as parent, 10 as tool_usage, 10 as tool_colour
            FROM coursera_summary
            WHERE achievement_level not like 'none';

        SET SQL_SAFE_UPDATES=0;
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('writing in forums (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        SET SQL_SAFE_UPDATES=0;
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading in forums (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        -- (3) 3 watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        -- (4) 4 taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (5) 5 taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (6) 1-2 posting and reading forums
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and reading forums (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            where (threads is not null or posts is not null or comments is not null)
            and (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        -- (7) 1-3 posting and watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        -- (8) 1-4 posting and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            where (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            and quiz_distinct is not null
            AND peer_final_grade is null;

        -- (9) 1-5 posting and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            and peer_final_grade is not null;

        -- (10) 2-3 reading and watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null;


        -- (11) 2-4 reading and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (12) 2-5 reading and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (13) 3-4 watching lectures and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (14) 3-5 watching lectures and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (15) 4-5 taking quizzes and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking quizzes and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (16) 1-2-3 posting, reading, watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null;

        -- (17) 1-2-4 posting, reading, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (18) 1-2-5 posting, reading, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (19) 1-3-4 posting, watching lectures, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, watching lectures, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (20) 1-3-5 posting, watching lectures, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, watching lectures, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (21) 1-4-5 posting, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (22) 2-3-4 reading, watching lectures, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, watching lectures, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads and null or posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (23) 2-3-5 reading, watching lectures, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, watching lectures, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (24) 2-4-5 reading, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments and null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (25) 3-4-5 watching lectures, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (26) 1-2-3-4 posting, reading, lectures, quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lectures, quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null;

        -- (27) 1-2-3-5 posting, reading, lecture, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lecture, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null;

        -- (28) 1-2-4-5 posting, reading, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (29) 1-3-4-5 posting, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (30) 2-3-4-5 reading, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- (31) 1-2-3-4-5 posting, reading, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'All students' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null;

        -- Tidy up parent records
        SET SQL_SAFE_UPDATES=0;
        UPDATE coursera_tool_summary_google dest, (SELECT convert(concat('All students (',count(distinct(user_id)), ')') using utf8) as parent FROM coursera_summary) src
          SET dest.parent = src.parent
          WHERE dest.parent like 'All students';

        -- start data for SOA students
        -- (1) 1 writing in forums
        SET SQL_SAFE_UPDATES=0;
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('writing in forums (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (2) 2 reading in forums
        SET SQL_SAFE_UPDATES=0;
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading in forums (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (3) 3 watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (4) 4 taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (5) 5 taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (6) 1-2 posting and reading forums
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and reading forums (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            where (threads is not null or posts is not null or comments is not null)
            and (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (7) 1-3 posting and watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (8) 1-4 posting and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            where (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            and quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (9) 1-5 posting and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (10) 2-3 reading and watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (11) 2-4 reading and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (12) 2-5 reading and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (13) 3-4 watching lectures and taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures and taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (14) 3-5 watching lectures and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (15) 4-5 taking quizzes and taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('taking quizzes and taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (16) 1-2-3 posting, reading, watching lectures
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, watching lectures (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (17) 1-2-4 posting, reading, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (18) 1-2-5 posting, reading, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (19) 1-3-4 posting, watching lectures, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, watching lectures, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (20) 1-3-5 posting, watching lectures, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, watching lectures, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (21) 1-4-5 posting, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (22) 2-3-4 reading, watching lectures, taking quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, watching lectures, taking quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads and null or posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (23) 2-3-5 reading, watching lectures, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, watching lectures, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (24) 2-4-5 reading, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments and null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (25) 3-4-5 watching lectures, taking quizzes, taking peer assessments
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('watching lectures, taking quizzes, taking peer assessments (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (26) 1-2-3-4 posting, reading, lectures, quizzes
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lectures, quizzes (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is null
            and achievement_level not like 'none';

        -- (27) 1-2-3-5 posting, reading, lecture, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lecture, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (28) 1-2-4-5 posting, reading, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (29) 1-3-4-5 posting, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is null and forums_visited is null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (30) 2-3-4-5 reading, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('reading, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is null and posts is null and comments is null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- (31) 1-2-3-4-5 posting, reading, lectures, quizzes, peer assessment
        INSERT INTO coursera_tool_summary_google (location, parent, tool_usage, tool_colour)
            SELECT convert(concat('posting, reading, lectures, quizzes, peer assessment (',count(distinct(user_id)), ')') using utf8) as location, 'Completed students only' as parent, count(distinct(user_id)) as tool_usage, count(distinct(user_id)) as tool_colour
            FROM coursera_summary
            WHERE (threads is not null or posts is not null or comments is not null)
            AND (threads_read is not null or forums_visited is not null)
            AND lecture_distinct is not null
            AND quiz_distinct is not null
            AND peer_final_grade is not null
            and achievement_level not like 'none';

        -- Tidy up parent records
        SET SQL_SAFE_UPDATES=0;
        UPDATE coursera_tool_summary_google dest, (SELECT convert(concat('Completed students only (',count(distinct(user_id)), ')') using utf8) as parent FROM coursera_summary where achievement_level not like 'none') src
          SET dest.parent = src.parent
          WHERE dest.parent like 'Completed students only';"""

        try:
            self.conn.execute(sql)
            self.t.commit()

        except:
            self.t.rollback()

    def google_extract(self):
        with self.db:
            cur = self.db.cursor()
            sql = """SELECT 'Location', 'Parent', 'Tool_Usage', 'Tool_Colour'
            UNION ALL
            SELECT location, parent, tool_usage, tool_colour
            FROM coursera_tool_summary_google
            WHERE tool_usage != 0"""

            cur.execute(sql)
            data = cur.fetchall()
            cur.close()

            output = []
            [output.append(list(i)) for i in data]

            with open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_treemap_extract.html'), 'w') as treemap_extract:
                treemap_extract.write("""<html><head><style>@media print{.no-print,.no-print *{display:none!important}}</style><link rel=stylesheet id=rtp-google-font-css href="http://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700" type=text/css media=all><link rel=stylesheet id=rtp-icon-fonts-animation-css href=http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/assets/fontello/css/animation.css type=text/css media=all><link rel=stylesheet id=rtp-icon-fonts-css href=http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/assets/fontello/css/rtpanel-fontello.css type=text/css media=all><link rel=stylesheet id=rtpanel-style-css href="http://moocs.is.ed.ac.uk/wp-content/themes/rtpanel/style.css?ver=4.1.5" type=text/css media=all><link rel=stylesheet id=slb_core-css href="http://moocs.is.ed.ac.uk/wp-content/plugins/simple-lightbox/client/css/app.css?ver=2.3.1" type=text/css media=all><script type=text/javascript src=https://www.google.com/jsapi></script><script type=text/javascript>function drawChart(){var e=google.visualization.arrayToDataTable([""")
                line1 = output[0]
                outstr = "['" + str(line1[0]) + "','" + str(line1[1]) + "','" + str(line1[2]) + "','" + str(line1[3]) + "'],"
                treemap_extract.write(outstr)

                line2 = output[1]
                outstr = "['" + str(line2[0]) + "',null," + str(line2[2]) + "," + str(line2[3]) + "],"
                treemap_extract.write(outstr)

                for i in output[2:-1]:
                    outstr = "['" + str(i[0]) + "','" + str(i[1]) + "'," + str(i[2]) + "," + str(i[3]) + "],"
                    treemap_extract.write(outstr)

                line_final = output[-1:][0]
                treemap_extract.write("['" + line_final[0] + "','" + line_final[1] + "'," + line_final[2] + "," + line_final[3] + "]")

                treemap_extract.write("""]);tree=new google.visualization.TreeMap(document.getElementById("chart_div")),tree.draw(e,{minColor:"#f00",midColor:"#ddd",maxColor:"#0d0",headerHeight:30,fontColor:"black"})}google.load("visualization","1",{packages:["treemap"]}),google.setOnLoadCallback(drawChart);</script><body><div id=header-wrapper class="rtp-header-wrapper rtp-section-wrapper no-print"><header id=header class="row rtp-section-container" role=banner><div class="rtp-header large-12 columns rtp-full-width-grid"><nav id=rtp-primary-menu role=navigation class="rtp-nav-wrapper rtp-mobile-nav"><a class=rtp-menu-icon id=rtp-mobile-menu-button href=#rtp-primary-menu><i class=rtp-icon-menu></i></a><ul id=rtp-nav-menu class="menu rtp-nav-container clearfix"><li id=menu-item-46 class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor current-menu-ancestor current-menu-parent current-page-parent current_page_parent current_page_ancestor menu-item-has-children menu-item-46"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/">MOOC Data</a><ul class=sub-menu><li id=menu-item-190 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-190"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a><ul class=sub-menu><li id=menu-item-275 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-275"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/">Course summary details</a></li><li id=menu-item-231 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-231"><a href="http://moocs.is.ed.ac.uk/course-design-and-structures/">Course design and structures</a></li><li id=menu-item-229 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-229"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/learner-participation-overview/">Learner participation overview</a></li><li id=menu-item-506 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-506"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/course-summary-details/survey-participation/">Survey participation</a></li></ul></li><li id=menu-item-167 class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-146 current_page_item menu-item-has-children menu-item-167"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/">Coursera Iteration 1</a><ul class=sub-menu><li id=menu-item-107 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-107"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/maps-of-mooc-participants/">Coursera Iteration 1 â€“ Geographic maps of MOOC participation</a></li><li id=menu-item-115 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-115"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-geographic-location-charts-and-popularity/">Coursera Iteration 1 â€“ Geographic location charts and popularity</a></li><li id=menu-item-106 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-106"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/mooc-participant-tool-usage/">Coursera Iteration 1 â€“ Tool usage maps</a></li><li id=menu-item-96 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-96"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/tool-usage-charts/">Coursera Iteration 1 â€“ Tool usage charts</a></li><li id=menu-item-467 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-467"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum/">Coursera 1 â€“ Forum Activity (SNA)</a></li><li id=menu-item-478 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-478"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1/coursera-1-forum-activity-over-time/">Coursera 1 â€“ Forum activity over time</a></li><li id=menu-item-123 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-123"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-1-survivor-analysis/">Coursera Iteration 1 â€“ Survivor analysis</a></li></ul></li><li id=menu-item-166 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-166"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-iteration-2/">Coursera Iteration 2</a><ul class=sub-menu><li id=menu-item-307 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-307"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-maps-of-mooc-participation/">Coursera Iteration 2 â€“ Geographic maps of MOOC participation</a></li><li id=menu-item-306 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-306"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-geographic-location-charts-and-popularity/">Coursera Iteration 2 â€“ Geographic location charts and popularity</a></li><li id=menu-item-297 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-297"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-2-tool-usage-maps/">Coursera Iteration 2 â€“ Tool usage maps</a></li><li id=menu-item-305 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-305"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-tool-usage-charts/">Coursera Iteration 2 â€“ Tool usage charts</a></li><li id=menu-item-157 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-157"><a href="http://moocs.is.ed.ac.uk/coursera-iteration-1-e-learning-and-digital-cultures-twitter-activity/">Coursera Iteration 2 â€“ E-Learning and Digital Cultures Twitter activity</a></li></ul></li><li id=menu-item-200 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-200"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/">Coursera comparison</a><ul class=sub-menu><li id=menu-item-202 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-202"><a href="http://moocs.is.ed.ac.uk/survey-data/">Survey data</a></li><li id=menu-item-343 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-343"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/learner-location/">Learner location</a></li><li id=menu-item-364 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-364"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/tool-usage/">Tool usage</a></li><li id=menu-item-406 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-406"><a href="http://moocs.is.ed.ac.uk/edinburgh-report-2/coursera-comparison/returning-learners/">Returning learners</a></li></ul></li><li id=menu-item-541 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-541"><a href="http://moocs.is.ed.ac.uk/wave-2-courses-iteration-1/">New courses iteration 1</a></li></ul></li><li id=menu-item-242 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-242"><a href="http://moocs.is.ed.ac.uk/contact-us/">Contact us</a></li><li id=menu-item-397 class="menu-item menu-item-type-post_type menu-item-object-page menu-item-397"><a href="http://moocs.is.ed.ac.uk/acknowledgements/">Acknowledgements</a></li></ul></nav><div class="rtp-logo-container clearfix"><h2 class=rtp-site-logo><a role=link href="http://moocs.is.ed.ac.uk/" title=moocs.is.ed.ac.uk><img role=img alt=moocs.is.ed.ac.uk height=94 width=473 src=http://moocs.is.ed.ac.uk/wp-content/uploads/2014/03/Capture.png></a></h2><h3 class=tagline>MOOCs at the University of Edinburgh</h3></div><hr></div></header></div><h2 style="text-align: center; padding: 25px;">""" + self.info['course'].encode('utf8') + self.info['iteration'].encode('utf8') + """ - all students </h2><div id=chart_div style=width:900px;height:500px;margin-left:auto;margin-right:auto></div>""")

            outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_treemap_extract.csv'), 'wb'))
            outcsv.writerows(data)

    def standard_extract(self):

        if not os.path.exists(self.output):
            os.makedirs(self.output)

        with self.db:
            cur = self.db.cursor()
            sql = """
            SELECT 'user', 'course_name', 'session_user_id', 'threads', 'posts', 'comments', 'subs_forums', 'subs_threads', 'forums_visited', 'threads_read', 'reputation', 'lecture_distinct', 'lecture_watches', 'quiz_distinct', 'quiz_total_attempts', 'peer_final_grade', 'peer_assessments_completed', 'ip_country', 'ip_continent', 'normal_grade', 'distinction_grade', 'achievement_level', 'last_access_time', 'registration_time', 'email_announcement', 'email_forum', 'timezone', 'deleted'
            UNION ALL
            SELECT CONCAT('{0}{1}:User',id) as user_name,
            '{0}{1}' as course_name,
            session_user_id,
            IFNULL(threads, '') as threads,
            IFNULL(posts, '') as posts,
            IFNULL(comments, '') as comments,
            IFNULL(subs_forums, '') as subs_forums,
            IFNULL(subs_threads, '') as subs_threads,
            IFNULL(forums_visited, '') as forums_visited,
            IFNULL(threads_read, '') as threads_read,
            IFNULL(reputation, '') as reputation,
            IFNULL(lecture_distinct, '') as lecture_distinct,
            IFNULL(lecture_watches, '') as lecture_watches,
            IFNULL((quiz_distinct-1), '') as quiz_distinct,
            IFNULL((quiz_total_attempts-1), '') as quiz_total_attempts,
            IFNULL(peer_final_grade, '') as peer_final_grade,
            IFNULL(peer_assessments_completed, '') as peer_assessments_completed,
            IFNULL(ip_country, '') as ip_country,
            IFNULL(ip_continent, '') as ip_continent,
            IFNULL(normal_grade, '') as normal_grade,
            IFNULL(distinction_grade, '') as distinction_grade,
            IFNULL(achievement_level, '') as achievement_level,
            IFNULL(last_access_time, '') as last_access_time,
            IFNULL(registration_time, '') as registration_time,
            IFNULL(email_announcement, '') as email_announcement,
            IFNULL(email_forum, '') as email_forum,
            IFNULL(timezone, '') as timezone,
            IFNULL(deleted,'') as deleted
            FROM coursera_summary;""".format(self.info['course'], self.info['iteration'])

            cur.execute(sql)
            data = cur.fetchall()
            cur.close()

            outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_standard_extract.csv'), 'wb'))
            outcsv.writerows(data)

    # Function which will produce the survey extract and write to to a <course><iteration>_survey_extract.csv file
    def survey_extract(self):
        with self.db:
            cur = self.db.cursor()
            sql = """SELECT 'user_name', 'session_user_id', 'user_id', 'submission_time', 'english', 'cert', 'learn_new', 'improve', 'new_people', 'try_online', 'try_MOOC', 'browse_ed', 'unsure', 'gender', 'age', 'academic_level', 'same_subject', 'ip_country', 'ip_continent', 'achievement_level', 'last_access_time', 'forum_new_threads', 'forums_posted', 'forums_visited', 'threads_read', 'lecture_watches', 'quiz_attempts', 'peer'
            UNION ALL
            SELECT CONCAT('{0}',id) as user_name,
            ces.*,
            cs.ip_country,
            cs.ip_continent,
            cs.achievement_level,
            cs.last_access_time,
            cs.threads as forum_new_threads,
            (IFNULL(cs.posts,0) + IFNULL(cs.comments,0)) as forums_posted,
            cs.forums_visited as forums_visited,
            cs.threads_read as threads_read,
            cs.lecture_watches as lecture_watches,
            (cs.quiz_total_attempts - 1) as quiz_attempts,
            cs.peer_assessments_completed as peer
            FROM coursera_summary cs, coursera_survey_merged ces
            WHERE cs.session_user_id = ces.session_user_id""".format(self.info['course'] + self.info['iteration'] + ":User")

            cur.execute(sql)
            data = cur.fetchall()
            cur.close()
            outcsv = csv.writer(open(os.path.join(self.output, self.info['course'] + self.info['iteration'] + '_survey_extract.csv'), 'wb'))
            outcsv.writerows(data)

    # Function which will take all the produced extracts and place them into an archive for easy downloading.
    def zip(self):
        directory_to_zip = os.path.join('files', self.info['course'] + self.info['iteration'], 'extracts/')
        archive_location = os.path.join('files', self.info['course'] + self.info['iteration'], self.info['course'] + self.info['iteration'] + '_extract')
        shutil.make_archive(archive_location, 'zip', directory_to_zip)

course_name = sys.argv[1]
start_time = time.time()
step4_time = time.time()
print "Processing: " + course_name
a = Automation(course_name[:-3], course_name[-3:], str(sys.argv[2]))
a.connect()
print "---" + course_name + " connect %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()

a.load()

print "---" + course_name + " load %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()
a.clear_charset()
print "---" + course_name + " charset %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()
if os.path.isfile('files/' + course_name + "/" + course_name + "_pii.csv"):
    a.pii()

print "---" + course_name + " pii %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()
a.standard_summary_extract()
print "---" + course_name + " summary %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()
if os.path.isfile('files/' + course_name + "/" + course_name + "_entry.csv"):
    a.load_entry_survey()

if os.path.isfile('files/' + course_name + "/" + course_name + "_exit.csv"):
    a.load_exit_survey()

a.merge_survey()
print "---" + course_name + " surveys %s seconds ---" % (time.time() - step4_time)


step4_time = time.time()
a.tools_summary()
a.tools_usage()
a.tools_google()

print "---" + course_name + " tools %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()

a.standard_extract()
if os.path.isfile('files/' + course_name + "/" + course_name + "_entry.csv") or os.path.isfile('files/' + course_name + "/" + course_name + "_exit.csv"):

    a.survey_extract()

    if os.path.isfile('files/' + course_name + "/" + course_name + "_entry.csv"):
        os.remove('files/' + course_name + "/" + course_name + "_entry.csv")

    if os.path.isfile('files/' + course_name + "/" + course_name + "_exit.csv"):
        os.remove('files/' + course_name + "/" + course_name + "_exit.csv")
a.google_extract()
print "---" + course_name + " extracts %s seconds ---" % (time.time() - step4_time)

step4_time = time.time()
a.zip()
print "---" + course_name + " zip %s seconds ---" % (time.time() - step4_time)


step4_time = time.time()
a.disconnect()
print "---" + course_name + " Disconnect %s seconds ---" % (time.time() - step4_time)


os.remove('files/' + course_name + "/" + course_name + "_general.sql")
os.remove('files/' + course_name + "/" + course_name + "_forum.sql")
os.remove('files/' + course_name + "/" + course_name + "_hash.sql")

print "--- %s seconds ---" % (time.time() - start_time)
